@model CommandGame.Models.Level

@{
    ViewData["Title"] = "Edit Level";
}

<div class="container mt-4">
    <h1>Edit Level</h1>
    <hr />

    <form asp-action="Edit" method="post" id="levelForm">
        <input type="hidden" asp-for="LevelId" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label asp-for="Name" class="form-label">Level Name</label>
                    <input asp-for="Name" class="form-control" required />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description</label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="Width" class="form-label">Width</label>
                            <input asp-for="Width" class="form-control" type="number" min="3" max="20" required />
                            <span asp-validation-for="Width" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="Height" class="form-label">Height</label>
                            <input asp-for="Height" class="form-control" type="number" min="3" max="20" required />
                            <span asp-validation-for="Height" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="MaxCommands" class="form-label">Maximum Commands</label>
                    <input asp-for="MaxCommands" class="form-control" type="number" min="1" max="100" required />
                    <span asp-validation-for="MaxCommands" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Ship Starting Position</label>
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">X Position</label>
                            <input asp-for="ShipStartX" class="form-control" type="number" min="0" required />
                            <span asp-validation-for="ShipStartX" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Y Position</label>
                            <input asp-for="ShipStartY" class="form-control" type="number" min="0" required />
                            <span asp-validation-for="ShipStartY" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="ShipStartOrientation" class="form-label">Ship Starting Orientation</label>
                    <select asp-for="ShipStartOrientation" class="form-select" required>
                        <option value="North">North</option>
                        <option value="East">East</option>
                        <option value="South">South</option>
                        <option value="West">West</option>
                    </select>
                    <span asp-validation-for="ShipStartOrientation" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label">Grid Editor</label>
                    <div class="btn-group mb-2">
                        <button type="button" class="btn btn-outline-primary active" onclick="setTool('color')">Color</button>
                        <button type="button" class="btn btn-outline-primary" onclick="setTool('star')">Star</button>
                        <button type="button" class="btn btn-outline-primary" onclick="setTool('ship')">Ship</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="clearGrid()">Clear</button>
                    </div>
                    <div class="btn-group mb-2">
                        <button type="button" class="btn btn-outline-danger" onclick="setColor('Red')">Red</button>
                        <button type="button" class="btn btn-outline-primary" onclick="setColor('Blue')">Blue</button>
                        <button type="button" class="btn btn-outline-success" onclick="setColor('Green')">Green</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="setColor('None')">None</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <div id="gridContainer" class="border rounded p-3 mb-3" style="overflow-x: auto;">
                    <div id="grid" style="display: grid; gap: 2px; grid-auto-flow: column;"></div>
                </div>
            </div>
        </div>

        <input type="hidden" name="tilesJson" id="tilesJson" value="@Model.TilesJson" />
        
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let currentTool = 'color';
        let currentColor = 'None';
        let grid = [];
        let shipPosition = { x: @Model.ShipStartX, y: @Model.ShipStartY };

        function setTool(tool) {
            currentTool = tool;
            document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
        }

        function setColor(color) {
            currentColor = color;
            document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
        }

        function createGrid() {
            const width = parseInt(document.getElementById('Width').value);
            const height = parseInt(document.getElementById('Height').value);
            const gridElement = document.getElementById('grid');
            gridElement.innerHTML = '';

            // Load existing grid data
            try {
                grid = JSON.parse(document.getElementById('tilesJson').value);
            } catch {
                grid = [];
                for (let y = 0; y < height; y++) {
                    grid[y] = [];
                    for (let x = 0; x < width; x++) {
                        grid[y][x] = {
                            color: 'None',
                            hasStar: false
                        };
                    }
                }
            }

            // Set grid properties
            gridElement.style.gridTemplateRows = `repeat(${height}, 40px)`;
            gridElement.style.gridTemplateColumns = `repeat(${width}, 40px)`;
            gridElement.style.gridAutoFlow = 'row';
            gridElement.style.width = 'fit-content';
            gridElement.style.margin = '0 auto';

            // Create grid cells
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const cell = document.createElement('div');
                    cell.style.width = '40px';
                    cell.style.height = '40px';
                    cell.style.border = '1px solid #ccc';
                    cell.style.backgroundColor = '#fff';
                    cell.style.cursor = 'pointer';
                    cell.style.position = 'relative';
                    cell.dataset.x = x;
                    cell.dataset.y = y;

                    cell.addEventListener('click', () => handleCellClick(x, y, cell));
                    gridElement.appendChild(cell);
                }
            }

            updateGridDisplay();
        }

        function handleCellClick(x, y, cell) {
            switch (currentTool) {
                case 'color':
                    grid[y][x].color = currentColor;
                    break;
                case 'star':
                    grid[y][x].hasStar = !grid[y][x].hasStar;
                    break;
                case 'ship':
                    shipPosition = { x, y };
                    document.getElementById('ShipStartX').value = x;
                    document.getElementById('ShipStartY').value = y;
                    break;
            }
            updateGridDisplay();
        }

        function updateGridDisplay() {
            const cells = document.querySelectorAll('#grid > div');
            cells.forEach(cell => {
                const x = parseInt(cell.dataset.x);
                const y = parseInt(cell.dataset.y);
                const tile = grid[y][x];

                // Set background color
                switch (tile.color) {
                    case 'Red': cell.style.backgroundColor = '#ffcdd2'; break;
                    case 'Blue': cell.style.backgroundColor = '#bbdefb'; break;
                    case 'Green': cell.style.backgroundColor = '#c8e6c9'; break;
                    default: cell.style.backgroundColor = '#fff';
                }

                // Show/hide star
                cell.innerHTML = tile.hasStar ? '‚≠ê' : '';

                // Show ship with rotating arrow
                if (x === shipPosition.x && y === shipPosition.y) {
                    const ship = document.createElement('div');
                    ship.style.position = 'absolute';
                    ship.style.top = '50%';
                    ship.style.left = '50%';
                    ship.style.transform = 'translate(-50%, -50%)';
                    ship.style.fontSize = '24px';
                    ship.style.transition = 'transform 0.2s';
                    
                    // Set arrow based on orientation
                    const orientation = document.getElementById('ShipStartOrientation').value;
                    switch (orientation) {
                        case 'North': ship.textContent = '‚Üë'; break;
                        case 'East': ship.textContent = '‚Üí'; break;
                        case 'South': ship.textContent = '‚Üì'; break;
                        case 'West': ship.textContent = '‚Üê'; break;
                    }
                    
                    cell.appendChild(ship);
                }
            });

            // Update hidden input
            document.getElementById('tilesJson').value = JSON.stringify(grid);
        }

        function clearGrid() {
            const width = parseInt(document.getElementById('Width').value);
            const height = parseInt(document.getElementById('Height').value);
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    grid[y][x] = {
                        color: 'None',
                        hasStar: false
                    };
                }
            }
            shipPosition = { x: 0, y: 0 };
            document.getElementById('ShipStartX').value = 0;
            document.getElementById('ShipStartY').value = 0;
            updateGridDisplay();
        }

        // Add orientation change handler
        document.getElementById('ShipStartOrientation').addEventListener('change', updateGridDisplay);

        // Initialize grid when page loads
        document.addEventListener('DOMContentLoaded', () => {
            createGrid();
            
            // Update grid when dimensions change
            document.getElementById('Width').addEventListener('change', createGrid);
            document.getElementById('Height').addEventListener('change', createGrid);
        });

        // Validate form before submit
        document.getElementById('levelForm').addEventListener('submit', (e) => {
            const width = parseInt(document.getElementById('Width').value);
            const height = parseInt(document.getElementById('Height').value);
            const shipX = parseInt(document.getElementById('ShipStartX').value);
            const shipY = parseInt(document.getElementById('ShipStartY').value);

            if (shipX < 0 || shipX >= width || shipY < 0 || shipY >= height) {
                e.preventDefault();
                alert('Ship position must be within the grid boundaries!');
                return;
            }

            let hasStar = false;
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    if (grid[y][x].hasStar) {
                        hasStar = true;
                        break;
                    }
                }
            }

            if (!hasStar) {
                e.preventDefault();
                alert('The level must have at least one star!');
                return;
            }
        });
    </script>
} 