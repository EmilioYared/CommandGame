@model CommandGame.Models.GameState
@{
    ViewData["Title"] = "Game";
    var grid = Model.Grid;
    var ship = Model.Ship;
    Func<CommandGame.Models.TileColor, string> TileColorClass = color =>
        color == CommandGame.Models.TileColor.Red ? "bg-red-200" :
        color == CommandGame.Models.TileColor.Blue ? "bg-blue-200" :
        color == CommandGame.Models.TileColor.Green ? "bg-green-200" :
        color == CommandGame.Models.TileColor.White ? "bg-white" :
        "bg-gray-100";
    var commandTypes = new[] { "Up", "TurnLeft", "TurnRight", "CallFunction" };
    var colors = new[] { "None", "Red", "Blue", "Green" };
    var userCommands = ViewBag.UserCommands as List<CommandGame.Models.UserCommand> ?? new List<CommandGame.Models.UserCommand>();
    var commandStack = ViewBag.CommandStack as List<CommandGame.Models.Command> ?? new List<CommandGame.Models.Command>();
    string ShipArrow(CommandGame.Models.Orientation orientation) => orientation switch {
        CommandGame.Models.Orientation.North => "⬆️",
        CommandGame.Models.Orientation.East => "➡️",
        CommandGame.Models.Orientation.South => "⬇️",
        CommandGame.Models.Orientation.West => "⬅️",
        _ => "⬆️"
    };
}

<div class="h-screen flex flex-col bg-gray-50">
    <!-- Header -->
    <div class="flex-none h-14 bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-6 h-full flex justify-between items-center">
            <div class="flex items-center gap-4">
                <h1 class="text-xl font-semibold text-gray-900">Level @ViewBag.LevelId</h1>
                <div class="h-6 w-px bg-gray-200"></div>
                <div class="text-sm text-gray-600">
                    @userCommands.Count/@Model.MaxCommands commands available
                </div>
            </div>
            <a asp-action="SelectLevel" asp-controller="Game" 
               class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 text-sm font-medium transition-colors">
                ← Back to Levels
            </a>
        </div>
    </div>

    <!-- Game Content -->
    <div id="gameContent" class="flex-1 min-h-0 p-6">
        @await Html.PartialAsync("_GameContent", Model)
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const gameContent = document.getElementById('gameContent');

            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(form);
                const action = formData.get('action');
                
                try {
                    const response = await fetch('@Url.Action("Index", "Game")', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const html = await response.text();
                    gameContent.innerHTML = html;

                    // Reattach event listeners to the new form
                    const newForm = gameContent.querySelector('form');
                    if (newForm) {
                        newForm.addEventListener('submit', arguments.callee);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while processing your request.');
                }
            });
        });
    </script>
} 